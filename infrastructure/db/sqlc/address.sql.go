// Code generated by sqlc. DO NOT EDIT.
// source: address.sql

package infrastructure

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUserAddress = `-- name: CreateUserAddress :one
INSERT INTO user_address (
    id,
    user_id,
    desa,
    dusun,
    kecamatan,
    kabupaten,
    alamat,
    latitude,
    longitude,
    created_at
  )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, user_id, desa, dusun, kecamatan, kabupaten, alamat, latitude, longitude, created_at, updated_at
`

type CreateUserAddressParams struct {
	ID        uuid.UUID    `json:"id"`
	UserID    uuid.UUID    `json:"user_id"`
	Desa      string       `json:"desa"`
	Dusun     string       `json:"dusun"`
	Kecamatan string       `json:"kecamatan"`
	Kabupaten string       `json:"kabupaten"`
	Alamat    string       `json:"alamat"`
	Latitude  float64      `json:"latitude"`
	Longitude float64      `json:"longitude"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateUserAddress(ctx context.Context, arg CreateUserAddressParams) (UserAddress, error) {
	row := q.db.QueryRowContext(ctx, createUserAddress,
		arg.ID,
		arg.UserID,
		arg.Desa,
		arg.Dusun,
		arg.Kecamatan,
		arg.Kabupaten,
		arg.Alamat,
		arg.Latitude,
		arg.Longitude,
		arg.CreatedAt,
	)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Desa,
		&i.Dusun,
		&i.Kecamatan,
		&i.Kabupaten,
		&i.Alamat,
		&i.Latitude,
		&i.Longitude,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserAddress = `-- name: DeleteUserAddress :exec
DELETE FROM user_address
WHERE id = $1
`

func (q *Queries) DeleteUserAddress(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserAddress, id)
	return err
}

const getUserAddress = `-- name: GetUserAddress :one
SELECT id, user_id, desa, dusun, kecamatan, kabupaten, alamat, latitude, longitude, created_at, updated_at
FROM user_address
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserAddress(ctx context.Context, id uuid.UUID) (UserAddress, error) {
	row := q.db.QueryRowContext(ctx, getUserAddress, id)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Desa,
		&i.Dusun,
		&i.Kecamatan,
		&i.Kabupaten,
		&i.Alamat,
		&i.Latitude,
		&i.Longitude,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUserAddress = `-- name: ListUserAddress :many
SELECT id, user_id, desa, dusun, kecamatan, kabupaten, alamat, latitude, longitude, created_at, updated_at
FROM user_address
ORDER BY created_at
LIMIT $1 OFFSET $2
`

type ListUserAddressParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserAddress(ctx context.Context, arg ListUserAddressParams) ([]UserAddress, error) {
	rows, err := q.db.QueryContext(ctx, listUserAddress, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserAddress{}
	for rows.Next() {
		var i UserAddress
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Desa,
			&i.Dusun,
			&i.Kecamatan,
			&i.Kabupaten,
			&i.Alamat,
			&i.Latitude,
			&i.Longitude,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAddress = `-- name: UpdateUserAddress :one
UPDATE user_address
SET id = $1,
  desa = $2,
  dusun = $3,
  kecamatan = $4,
  kabupaten = $5,
  alamat = $6,
  latitude = $7,
  longitude = $8,
  updated_at = $9
WHERE id = $1
RETURNING id, user_id, desa, dusun, kecamatan, kabupaten, alamat, latitude, longitude, created_at, updated_at
`

type UpdateUserAddressParams struct {
	ID        uuid.UUID `json:"id"`
	Desa      string    `json:"desa"`
	Dusun     string    `json:"dusun"`
	Kecamatan string    `json:"kecamatan"`
	Kabupaten string    `json:"kabupaten"`
	Alamat    string    `json:"alamat"`
	Latitude  float64   `json:"latitude"`
	Longitude float64   `json:"longitude"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUserAddress(ctx context.Context, arg UpdateUserAddressParams) (UserAddress, error) {
	row := q.db.QueryRowContext(ctx, updateUserAddress,
		arg.ID,
		arg.Desa,
		arg.Dusun,
		arg.Kecamatan,
		arg.Kabupaten,
		arg.Alamat,
		arg.Latitude,
		arg.Longitude,
		arg.UpdatedAt,
	)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Desa,
		&i.Dusun,
		&i.Kecamatan,
		&i.Kabupaten,
		&i.Alamat,
		&i.Latitude,
		&i.Longitude,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
