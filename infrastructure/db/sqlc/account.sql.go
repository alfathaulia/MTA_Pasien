// Code generated by sqlc. DO NOT EDIT.
// source: account.sql

package infrastructure

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUserAccount = `-- name: CreateUserAccount :one
INSERT INTO user_account (
    id,
    user_id,
    first_name,
    last_name,
    photo_profile,
    tempat_lahir,
    latitude,
    longitude,
    tgl_lahir,
    created_at
  )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, user_id, first_name, last_name, photo_profile, tempat_lahir, latitude, longitude, tgl_lahir, created_at, updated_at
`

type CreateUserAccountParams struct {
	ID           uuid.UUID    `json:"id"`
	UserID       uuid.UUID    `json:"user_id"`
	FirstName    string       `json:"first_name"`
	LastName     string       `json:"last_name"`
	PhotoProfile string       `json:"photo_profile"`
	TempatLahir  string       `json:"tempat_lahir"`
	Latitude     float64      `json:"latitude"`
	Longitude    float64      `json:"longitude"`
	TglLahir     time.Time    `json:"tgl_lahir"`
	CreatedAt    sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateUserAccount(ctx context.Context, arg CreateUserAccountParams) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, createUserAccount,
		arg.ID,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.PhotoProfile,
		arg.TempatLahir,
		arg.Latitude,
		arg.Longitude,
		arg.TglLahir,
		arg.CreatedAt,
	)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.PhotoProfile,
		&i.TempatLahir,
		&i.Latitude,
		&i.Longitude,
		&i.TglLahir,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserAccount = `-- name: DeleteUserAccount :exec
DELETE FROM user_account
WHERE id = $1
`

func (q *Queries) DeleteUserAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserAccount, id)
	return err
}

const getUserAccount = `-- name: GetUserAccount :one
SELECT id, user_id, first_name, last_name, photo_profile, tempat_lahir, latitude, longitude, tgl_lahir, created_at, updated_at
FROM user_account
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserAccount(ctx context.Context, id uuid.UUID) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, getUserAccount, id)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.PhotoProfile,
		&i.TempatLahir,
		&i.Latitude,
		&i.Longitude,
		&i.TglLahir,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUserAccount = `-- name: ListUserAccount :many
SELECT id, user_id, first_name, last_name, photo_profile, tempat_lahir, latitude, longitude, tgl_lahir, created_at, updated_at
FROM user_account
ORDER BY created_at
LIMIT $1 OFFSET $2
`

type ListUserAccountParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserAccount(ctx context.Context, arg ListUserAccountParams) ([]UserAccount, error) {
	rows, err := q.db.QueryContext(ctx, listUserAccount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserAccount{}
	for rows.Next() {
		var i UserAccount
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.PhotoProfile,
			&i.TempatLahir,
			&i.Latitude,
			&i.Longitude,
			&i.TglLahir,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAccount = `-- name: UpdateUserAccount :one
UPDATE user_account
SET id = $1,
  first_name = $2,
  last_name = $3,
  photo_profile = $4,
  tempat_lahir = $5,
  latitude = $6,
  longitude = $7,
  tgl_lahir = $8,
  updated_at = $9
WHERE id = $1
RETURNING id, user_id, first_name, last_name, photo_profile, tempat_lahir, latitude, longitude, tgl_lahir, created_at, updated_at
`

type UpdateUserAccountParams struct {
	ID           uuid.UUID `json:"id"`
	FirstName    string    `json:"first_name"`
	LastName     string    `json:"last_name"`
	PhotoProfile string    `json:"photo_profile"`
	TempatLahir  string    `json:"tempat_lahir"`
	Latitude     float64   `json:"latitude"`
	Longitude    float64   `json:"longitude"`
	TglLahir     time.Time `json:"tgl_lahir"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUserAccount(ctx context.Context, arg UpdateUserAccountParams) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, updateUserAccount,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.PhotoProfile,
		arg.TempatLahir,
		arg.Latitude,
		arg.Longitude,
		arg.TglLahir,
		arg.UpdatedAt,
	)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.PhotoProfile,
		&i.TempatLahir,
		&i.Latitude,
		&i.Longitude,
		&i.TglLahir,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
